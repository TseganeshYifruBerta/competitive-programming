import heapq
class Solution(object):
    def swimInWater(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        q = [(grid[0][0], 0, 0)]
        dirs = [(0, 1), (1, 0), (-1, 0), (0, -1)]
        visited = set()
        while q :
            time, row, col = heapq.heappop(q)
            if (row, col) not in visited :
                visited.add((row, col))
            if row == len(grid) - 1 and \
                col == len(grid) - 1:
                return time
            for r_add, c_add in dirs:
                new_r = r_add + row
                new_c = c_add + col
                if 0 <= new_r < len(grid) and \
                    0 <= new_c < len(grid[row]) and (new_r, new_c) not in visited:
                    heapq.heappush(q, (max(grid[new_r][new_c], time), new_r, new_c))
                    visited.add((new_r, new_c))

                
                    
            
        
