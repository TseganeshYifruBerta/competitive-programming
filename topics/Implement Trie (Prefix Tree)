class TrieNode:
    def __init__(self):
        self.children = [None] * 26
        self.isWord = False

class Trie:

    def __init__(self):
        self.root = TrieNode()
        

    def insert(self, word: str) -> None:
        current = self.root
        for c in word:
            index = ord(c) - ord('a')
            if not current.children[index]:
                current.children[index] = TrieNode()
                current = current.children[index]
            else:
                current = current.children[index]
        current.isWord = True

    def search(self, word: str, isPrifix = False) -> bool:
        current = self.root
        for c in word:
            index = ord(c) - ord('a')
            if not current.children[index]:
                return False
            current = current.children[index]
        if current.isWord or isPrifix:
            return True 
        return False
            
        

    def startsWith(self, prefix: str) -> bool:
        return self.search(prefix, True)
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)









class TrieNode:
    def __init__(self):
        self.children = {}
        self.isWord = False

class Trie:

    def __init__(self):
        self.root = TrieNode()
        

    def insert(self, word: str) -> None:
        current = self.root
        for c in word:
            if c not in current.children:
                current.children[c] = TrieNode()
                current = current.children[c]
            else:
                current = current.children[c]
        current.isWord = True

    def search(self, word: str, isPrifix = False) -> bool:
        current = self.root
        for c in word:
            if c not in current.children:
                return False
            current = current.children[c]
        if current.isWord or isPrifix:
            return True 
        return False
            
        

    def startsWith(self, prefix: str) -> bool:
        return self.search(prefix, True)
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
