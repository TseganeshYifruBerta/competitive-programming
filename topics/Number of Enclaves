class Solution(object):
    def numEnclaves(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        dirs = [(0, 1), (1, 0), (-1, 0), (0, -1)]
        def dfs(row, col):
            if grid[row][col] == 0:
                return 
            grid[row][col] = "T"
            for r_add, c_add in dirs:
                new_r = r_add + row
                new_c = c_add + col
                if 0 <= new_r < len(grid) and \
                    0 <= new_c < len(grid[row]) and \
                        grid[new_r][new_c] == 1 :
                    dfs(new_r, new_c)
                    
            
            
        for row in range(len(grid)):
            for col in range(len(grid[row])):
                if (row == 0 or \
                  row == len(grid) - 1 or \
                    col == 0 or \
                      col == len(grid[row]) - 1) and \
                        grid[row][col] == 1 :
                    dfs(row, col)
        count = 0
        for row in range(len(grid)):
            for col in range(len(grid[row])):
                if grid[row][col] == 1 :
                    count += 1
        return count
