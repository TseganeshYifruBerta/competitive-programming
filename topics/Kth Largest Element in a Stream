import heapq
class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.nums=nums
        self.k=k
        self.arr=[]
        if len(self.nums)==0:
            return
        for i in range(k):
            if i>=len(nums):
                break
            heapq.heappush(self.arr,nums[i])
            
        # heapq.heapify(self.arr)
        for i in range(self.k,len(nums)):
            if nums[i]>self.arr[0]:
                heapq.heappop(self.arr)
                heapq.heappush(self.arr,nums[i])
    def add(self, val: int) -> int:
        if len(self.arr)<self.k:
            heapq.heappush(self.arr,val)
        elif len(self.arr)==self.k:
            if val>self.arr[0]:
                heapq.heappop(self.arr)
                heapq.heappush(self.arr,val)
        return self.arr[0]
        


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
